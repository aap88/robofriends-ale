{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","Cardlist","robots","cardsArray","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","this","Component","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAIL","App","onSearchChange","event","setState","target","value","onRequestRobots","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","text","payload","fetch","then","response","json","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"sQAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,gCACI,6BAAKC,IACL,4BAAIC,WCaLI,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OACI,cAAC,EAAD,CAEIX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,OAHZS,MAOjB,OACI,8BACKH,KCDEI,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,8BACI,uBACIX,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCaJC,E,kDAfX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,0CAOnB,WACI,OAAIC,KAAKF,MAAMC,SACJ,qDAEJC,KAAKT,MAAMK,a,GAZEK,aCFfC,G,MAAqB,uBAErBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAsB,sBCuB7BC,E,4MAMFC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAExB,YAAauB,EAAME,OAAOC,S,uDAL9C,WACIX,KAAKT,MAAMqB,oB,oBAQnB,WACI,MAA2DZ,KAAKT,MAAxDsB,EAAR,EAAQA,YAAaN,EAArB,EAAqBA,eAAgB5B,EAArC,EAAqCA,OAAQmC,EAA7C,EAA6CA,UACvCC,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASN,EAAYK,kBAEzD,OAAOJ,EACH,4CAEI,sBAAKvC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,oBAAIA,UAAU,KAAd,yBACA,oBAAIA,UAAU,KAAd,yBACA,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWW,aAAcqB,IACzB,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU5B,OAAQoC,e,GA3BxBd,aAkCHmB,eAlDS,SAAAtB,GACpB,MAAO,CACHe,YAAaf,EAAMuB,aAAaR,YAChClC,OAAQmB,EAAMwB,cAAc3C,OAC5BmC,UAAWhB,EAAMwB,cAAcR,UAC/BS,MAAOzB,EAAMwB,cAAcC,UAIR,SAACC,GACxB,MAAO,CACHjB,eAAgB,SAACC,GAAD,OAAWgB,GCfJC,EDe4BjB,EAAME,OAAOC,MCf/B,CACrCxB,KAAMe,EACNwB,QAASD,KAFiB,IAACA,GDgBvBb,gBAAiB,kBAAMY,GCXI,SAACA,GAChCA,EAAS,CAAErC,KAAMgB,IACjBwB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIP,EAAS,CAAErC,KAAMiB,EAAwBsB,QAASK,OAC/DH,MAAK,SAAAL,GAAK,OAAIC,EAAS,CAAErC,KAAMkB,EAAqBqB,QAASH,cD4CvDH,CAA6Cd,GEjD7C0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCARO,G,MAAqB,CACvB3B,YAAa,KAYX4B,EAAqB,CACvB3B,WAAW,EACXnC,OAAQ,GACR4C,MAAO,ICTLmB,EAAcC,YAAgB,CAAEtB,aDHV,WAA0C,IAAzCvB,EAAwC,uDAAlC0C,EAAoBI,EAAc,uDAAP,GAC1D,OAAOA,EAAOzD,MACV,KAAKe,EACD,OAAO2C,OAAOC,OAAO,GAAIhD,EAAO,CAACe,YAAa+B,EAAOlB,UACzD,QACI,OAAO5B,ICFiCwB,cDYvB,WAA0C,IAAzCxB,EAAwC,uDAAlC2C,EAAoBG,EAAc,uDAAP,GAC3D,OAAOA,EAAOzD,MACV,KAAKgB,EACD,OAAO0C,OAAOC,OAAO,GAAIhD,EAAO,CAAEgB,WAAW,IACjD,KAAKV,EACD,OAAOyC,OAAOC,OAAO,GAAIhD,EAAO,CAAEnB,OAAQiE,EAAOlB,QAASZ,WAAW,IACzE,KAAKT,EACD,OAAOwC,OAAOC,OAAO,GAAIhD,EAAO,CAAEyB,MAAOqB,EAAOlB,QAASZ,WAAW,IACxE,QACI,OAAOhB,MCpBbiD,EAAQC,YAAYN,EAAaO,YAAgBC,MAEvDC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.d706984c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({ robots }) => {\n    const cardsArray = robots.map((user, i)=> {\n        return (\n            <Card \n                key={i} \n                id={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email} \n            />\n        );\n    })\n    return (\n        <div>\n            {cardsArray}\n        </div>\n    );\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='Search Robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>There was an error.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value });\n        //setSearchField(event.target.value)\n    }\n\nrender() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n        <h1>Loading...</h1> :\n        (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <h2 className='f1'>RoboFriends</h2>\n                <h3 className='f1'>RoboFriends</h3>\n                <h4 className='f1'>RoboFriends</h4>\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <Cardlist robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n//export default App;","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAIL\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .then(error => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error}))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAIL\n} from \"./constants\"\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action=[]) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAIL:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n//mport createLogger from 'react-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n//const logger = createLogger();  logger\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}